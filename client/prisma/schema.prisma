generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  activeRooms      Int             @default(0)
  lastChangedName  DateTime?
  podiumPlacements Int             @default(0)
  totalGames       Int             @default(0)
  totalWins        Int             @default(0)

  // Relazioni
  accounts         Account[]
  Authenticator    Authenticator[]
  sessions         Session[]

  // Relazione 1:N → Un utente può possedere molte lobby
  ownedLobbies     Lobby[]         @relation("LobbyOwner")

  // Relazione N:N → Un utente può partecipare a molte lobby
  lobbies LobbyUser[]
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Lobby {
  id         Int   @id @default(autoincrement())
  name       String
  maxPlayers Int      @default(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  isPrivate  Boolean  @default(false)

  // Relazione 1:N → Owner della lobby
  ownerId    String
  owner      User     @relation("LobbyOwner", fields: [ownerId], references: [id])

  // Relazione N:N → Giocatori della lobby
  players LobbyUser[]
}

model LobbyUser {
  userId    String
  lobbyId   Int

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  lobby     Lobby            @relation(fields: [lobbyId], references: [id], onDelete: Cascade)

  @@id([userId, lobbyId])  // chiave primaria composta
}
